apply plugin: "base"

version = System.getProperty("grails.version") ?: "1.3.8"

archivesBaseName = "grails-docs"

checkOutDir = "${buildDir.path}/checkout"
outputDir = "${buildDir.path}/docs"

explicitGrailsHome = System.getProperty("grails.home")
grailsHome = explicitGrailsHome ? file(explicitGrailsHome).absolutePath : "$checkOutDir/grails-src"

configurations {
    publish
}

buildscript {
    repositories {
        mavenRepo url: "http://repo.grails.org/grails/core"
    }

    dependencies {
        classpath "org.grails:grails-docs:2.0.1"
    }
}

task fetchGrailsSource << {
    ant.mkdir dir: checkOutDir

    println "Downloading Grails source code. If you already have a copy " +
            "of the Grails source code checked out you can avoid this download " +
            "by setting the grails.home system property to point to your local " +
            "copy of the source. See README.txt for more information."

    def zipFile = "${checkOutDir}/grails-src.zip"
    ant.get src: "http://github.com/grails/grails-core/zipball/2.0.x", dest: zipFile, verbose: true

    ant.unzip src: zipFile, dest: checkOutDir, {
        mapper type: "regexp", from: "(grails-grails-core-\\S*?/)(.*)", to: "grails-src/\\2"
    }

    println "Grails source code has been downloaded to ${relativePath(grailsHome)}"
}

fetchGrailsSource.onlyIf { !explicitGrailsHome }

task apiDocs(type: GradleBuild, dependsOn: 'fetchGrailsSource') {
    tasks = ["groovydoc"]
    buildFile = "${project.grailsHome}/build.gradle"
}

apiDocs.onlyIf { !System.getProperty("disable.groovydocs") }

task copyApiDocs(type: Copy) {
    from "${project.grailsHome}/doc/api"
    into "${outputDir}/api"
}

task migrate(type: grails.doc.gradle.MigrateLegacyDocs)

task publishGuide(type: grails.doc.gradle.PublishGuide, dependsOn: ['apiDocs', 'copyApiDocs']) {
    def searchDirs = project.file(project.grailsHome).listFiles().findAll {
        new File(it, "src/main/groovy/org/codehaus/groovy/grails").exists()
    }.collect {
        new File(it, "src/main/groovy/org/codehaus/groovy/grails")
    }

    propertiesFiles = [ new File(project.grailsHome, "build.properties") ]
    macros = [ new grails.doc.macros.GspTagSourceMacro(searchDirs) ]
}

task publishPdf(type: grails.doc.gradle.PublishPdf, dependsOn: ['publishGuide'])

task docs(dependsOn: ['publishPdf'])

for (f in new File(projectDir, "src").listFiles()) {
    if (f.directory && !(f.name in ["en", "guide", "ref"])) {
        docs.dependsOn << "publishPdf_${f.name}"
    }
}

task dist(type: Zip, dependsOn: 'docs') {
    from outputDir
}

artifacts {
    archives dist
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-8'
}
