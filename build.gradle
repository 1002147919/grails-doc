apply plugin: "base"

version = System.getProperty("grails.version") ?: "1.4.0.BUILD-SNAPSHOT"

archivesBaseName = "grails-docs"

checkOutDir = "${buildDir.path}/checkout"
outputDir = "${buildDir.path}/docs"

explicitGrailsHome = System.getProperty("grails.home")
grailsHome = explicitGrailsHome ? file(explicitGrailsHome).absolutePath : "$checkOutDir/grails-src"

configurations {
    publish
}

repositories {
    mavenCentral()
    mavenRepo urls: "http://download.java.net/maven/2/"
    mavenRepo urls: "http://snapshots.repository.codehaus.org/"
}

dependencies {
    // Required while picking up grails-docs from dist dir.
    publish "org.grails:grails-gdoc-engine:1.0-SNAPSHOT", "org.codehaus.groovy:groovy:1.8.0"

    publish "org.slf4j:slf4j-log4j12:1.5.8",
            "org.xhtmlrenderer:core-renderer:R8"
}

task fetchGrailsSource << {
    ant.mkdir dir: checkOutDir

    println "Downloading Grails source code. If you already have a copy " + 
            "of the Grails source code checked out you can avoid this download " +
            "by setting the grails.home system property to point to your local " +
            "copy of the source. See README.txt for more information."

    def zipFile = "${checkOutDir}/grails-src.zip"
    ant.get src: "http://github.com/grails/grails-core/zipball/master", dest: zipFile, verbose: true

    ant.unzip src: zipFile, dest: checkOutDir, {
        mapper type: "regexp", from: "(grails-grails-core-\\S*?/)(.*)", to: "grails-src/\\2"
    }

    println "Grails source code has been downloaded to ${relativePath(grailsHome)}"
}

fetchGrailsSource.onlyIf { !explicitGrailsHome }

task apiDocs(type: GradleBuild, dependsOn: 'fetchGrailsSource') {
	def deps = [":grails-docs:install"]
	if(!System.getProperty("disable.groovydocs")) {
		deps << ['groovydoc']
	}
    tasks = deps
    buildFile = "${project.grailsHome}/build.gradle"
}

task copyApiDocs(type: Copy) {
    from "${project.grailsHome}/doc/api"
    into "${outputDir}/api"
}

task publishGuide(dependsOn: ['apiDocs', 'copyApiDocs']) {
    sourceDir = projectDir.path + "/src"
    targetDir = outputDir
    workDir = buildDir

    doLast {
        // Create a class loader for the publication stuff.
        def classpath = project.configurations.publish
        classpath = classpath.files.collect { it.toURI().toURL() }

        // Add the grails-docs JAR.
        def distDir = file("${project.grailsHome}/dist")
        classpath << distDir.listFiles({ dir, name -> name ==~ /grails-docs-.*\.jar/ } as FilenameFilter)[0].toURI().toURL()
        project.publishClassLoader = new URLClassLoader(classpath as URL[], Thread.currentThread().contextClassLoader)

        def props = new Properties()
        new File("${projectDir}/resources/doc.properties").withInputStream {input ->
            props.load(input)
        }
        new File("${project.grailsHome}/build.properties").withInputStream {input ->
            props.load(input)
        }

        def publisher = publishClassLoader.loadClass("grails.doc.DocPublisher").newInstance(file(sourceDir), file(targetDir))
        publisher.ant = ant
        publisher.workDir = workDir
        publisher.images = file("${projectDir}/resources/img")
        publisher.css = file("${projectDir}/resources/css")
        publisher.js = file("${projectDir}/resources/js")
        publisher.style = file("${projectDir}/resources/style")
        publisher.title = props.title
        publisher.version = props."grails.version"
        publisher.authors = props.authors
        publisher.copyright = props.copyright
        publisher.footer = props.footer
        publisher.logo = '<a href="http://grails.org" target="_blank"><img alt="Grails Logo" title="The Grails Framework" src="${path}/img/grails.png" border="0"/></a>'
        publisher.sponsorLogo = '<a href="http://springsource.com" target="_blank"><img alt="SpringSource Logo" title="SpringSource - Weapons for the War on Java Complexity" src="${path}/img/springsource-logo.png" border="0"/></a>'
        publisher.engineProperties = props

        // Add support for displaying the source code for GSP tags.
        def sourceMacro = publishClassLoader.loadClass("grails.doc.macros.GspTagSourceMacro")
        def searchDirs = file(project.grailsHome).listFiles().findAll {
            new File(it, "src/main/groovy/org/codehaus/groovy/grails").exists()
        }.collect {
            new File(it, "src/main/groovy/org/codehaus/groovy/grails")
        }

        publisher.registerMacro(sourceMacro.newInstance(searchDirs))
        
        // Radeox loads its bundles off the context class loader, which
        // unfortunately doesn't contain the grails-docs JAR. So, we
        // temporarily switch the DocPublisher class loader into the
        // thread so that the Radeox bundles can be found.
        def oldClassLoader = Thread.currentThread().contextClassLoader
        Thread.currentThread().contextClassLoader = publisher.getClass().classLoader

        publisher.publish()

        // Restore the old context class loader.
        Thread.currentThread().contextClassLoader = oldClassLoader
    }
}

task publishPdf(dependsOn: ['publishGuide']) << {
    try {
    new File(outputDir, "guide").eachFileMatch(~/.*\.html/) { f ->
//        def currFile = new File(outputDir, "guide/single.html")
        def currFile = f
        def pdfBuilder = publishClassLoader.loadClass("grails.doc.PdfBuilder")
        def xml = pdfBuilder.createXml(currFile, new File(outputDir).absolutePath)
        pdfBuilder.createPdf xml,
                new File(currFile.parentFile, currFile.name[0..-5] + "pdf"),
                currFile //file://${new File(outputDir).absolutePath}/guide/single.html"
    }
    }
    catch (Exception ex) {
        ex.printStackTrace()
    }
}

task docs(dependsOn: ['publishPdf'])

task dist(type: Zip, dependsOn: 'docs') {
    from outputDir
}

artifacts {
    archives dist
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.0-milestone-3'
}

