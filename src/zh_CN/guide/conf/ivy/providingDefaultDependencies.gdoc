{hidden}
Most Grails applications have runtime dependencies on several jar files that are provided by the Grails framework.  These include libraries like Spring, Sitemesh, Hibernate etc.  When a war file is created, all of these dependencies will be included in it.  But, an application may choose to exclude these jar files from the war.  This is useful when the jar files will be provided by the container, as would normally be the case if multiple Grails applications are deployed to the same container.

The dependency resolution DSL provides a mechanism to express that all of the default dependencies will be provided by the container. This is done by invoking the @defaultDependenciesProvided@ method and passing @true@ as an argument:

{code}
grails.project.dependency.resolution = {

    defaultDependenciesProvided true // all of the default dependencies will
                                     // be "provided" by the container

    inherits "global" // inherit Grails' default dependencies

    repositories {
        grailsHome()
        ...
    }
    dependencies {
        ...
    }
}
{code}

{note}
@defaultDependenciesProvided@ must come before @inherits@, otherwise the Grails dependencies will be included in the war.
{note}
{hidden}

大部分的Grails应用依赖于Grails框架自带的一些jar文件，比如Spring、Sitemesh和Hibernate等等。当创建一个war文件的时候。但是应用还是可以选择从war中排除这些jar文件的。这非常适合于本身容器已经包含这些jar文件的情况，尤其多个Grails应用部署于这样同一容器中。

解析依赖的DSL就有让容器提供缺省依赖的选项，这可以通过传递@true@给@defaultDependenciesProvided@方法来实现：

{code}
grails.project.dependency.resolution = {

    defaultDependenciesProvided true // all of the default dependencies will
                                     // be "provided" by the container

    inherits "global" // inherit Grails' default dependencies

    repositories {
        grailsHome()
        ...
    }
    dependencies {
        ...
    }
}
{code}

{note}
@defaultDependenciesProvided@必须位于@inherits@之前，否则Grails的依赖还是会被包含到war中。
{note}
