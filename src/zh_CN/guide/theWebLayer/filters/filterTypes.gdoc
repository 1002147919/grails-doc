{hidden}
Within the body of the filter you can then define one or several of the following interceptor types for the filter:

* @before@ - Executed before the action. Return @false@ to indicate that the response has been handled that that all future filters and the action should not execute
* @after@ - Executed after an action. Takes a first argument as the view model to allow modification of the model before rendering the view
* @afterView@ - Executed after view rendering.  Takes an Exception as an argument which will be non-@null@ if an exception occurs during processing. Note: this Closure is called before the layout is applied.

For example to fulfill the common simplistic authentication use case you could define a filter as follows:

{code:java}
class SecurityFilters {
   def filters = {
       loginCheck(controller: '*', action: '*') {
           before = {
              if (!session.user && !actionName.equals('login')) {
                  redirect(action: 'login')
                  return false
               }
           }
       }
   }
}
{code}

Here the @loginCheck@ filter uses a @before@ interceptor to execute a block of code that checks if a user is in the session and if not redirects to the login action. Note how returning false ensure that the action itself is not executed.

Here's a more involved example that demonstrates all three filter types:

{code:java}
import java.util.concurrent.atomic.AtomicLong

class LoggingFilters {

   private static final AtomicLong REQUEST_NUMBER_COUNTER = new AtomicLong()
   private static final String START_TIME_ATTRIBUTE = 'Controller__START_TIME__'
   private static final String REQUEST_NUMBER_ATTRIBUTE = 'Controller__REQUEST_NUMBER__'

   def filters = {

      logFilter(controller: '*', action: '*') {

         before = {
            if (!log.debugEnabled) return true

            long start = System.currentTimeMillis()
            long currentRequestNumber = REQUEST_NUMBER_COUNTER.incrementAndGet()

            request[START_TIME_ATTRIBUTE] = start
            request[REQUEST_NUMBER_ATTRIBUTE] = currentRequestNumber

            log.debug "preHandle request #\$currentRequestNumber : " +
               "'\$request.servletPath'/'\$request.forwardURI', " +
               "from \$request.remoteHost (\$request.remoteAddr) " +
               " at \${new Date()}, Ajax: \$request.xhr, controller: \$controllerName, " +
               "action: \$actionName, params: \${new TreeMap(params)}"

            return true
         }

         after = { Map model ->

            if (!log.debugEnabled) return true

            long start = request[START_TIME_ATTRIBUTE]
            long end = System.currentTimeMillis()
            long requestNumber = request[REQUEST_NUMBER_ATTRIBUTE]

            def msg = "postHandle request #\$requestNumber: end \${new Date()}, " +
                      "controller total time \${end - start}ms"
            if (log.traceEnabled) {
            	log.trace msg + "; model: \$model"
            }
            else {
            	log.debug msg
            }
         }

         afterView = { Exception e ->

            if (!log.debugEnabled) return true

            long start = request[START_TIME_ATTRIBUTE]
            long end = System.currentTimeMillis()
            long requestNumber = request[REQUEST_NUMBER_ATTRIBUTE]

            def msg = "afterCompletion request #\$requestNumber: " +
                      "end \${new Date()}, total time \${end - start}ms"
            if (e) {
               log.debug "\$msg \\\n\\\texception: \$e.message", e
            }
            else {
               log.debug msg
            }
         }
      }
   }
}
{code}

In this logging example we just log various request information, but note that the @model@ map in the @after@ filter is mutable. If you need to add or remove items from the model map you can do that in the @after@ filter.
{hidden}

在过滤器的主体内，你可以定义下列过滤器中拦截器类型的一个或者几个：

* @before@ - 在操作之前执行。返回值@false@表示响应已经被符合条件的过滤器处理过，并且其操作不被执行
* @after@ - 在操作之后执行。其第一个参数为视图模型（view model），并且允许在渲染视图之前修改此模型
* @afterView@ - 在渲染视图之后执行。如果有异常发生，其第一个参数为一个非@null@的异常。注意：此闭包在应用布局以前被调用。

比如，要执行一个通用简单的验证，你可以定义如下所示的过滤器：

{code:java}
class SecurityFilters {
   def filters = {
       loginCheck(controller: '*', action: '*') {
           before = {
              if (!session.user && !actionName.equals('login')) {
                  redirect(action: 'login')
                  return false
               }
           }
       }
   }
}
{code}

此处的@loginCheck@过滤器使用了@before@拦截器来执行一个代码块，用以检查一个用户是否在会话当中，如果不在，就重定向到login操作。注意：如何通过返回false的方式来确保操作本身不被执行。

下面是一个更深入的示例来演示所有的三种过滤器类型：

{code:java}
import java.util.concurrent.atomic.AtomicLong

class LoggingFilters {

   private static final AtomicLong REQUEST_NUMBER_COUNTER = new AtomicLong()
   private static final String START_TIME_ATTRIBUTE = 'Controller__START_TIME__'
   private static final String REQUEST_NUMBER_ATTRIBUTE = 'Controller__REQUEST_NUMBER__'

   def filters = {

      logFilter(controller: '*', action: '*') {

         before = {
            if (!log.debugEnabled) return true

            long start = System.currentTimeMillis()
            long currentRequestNumber = REQUEST_NUMBER_COUNTER.incrementAndGet()

            request[START_TIME_ATTRIBUTE] = start
            request[REQUEST_NUMBER_ATTRIBUTE] = currentRequestNumber

            log.debug "preHandle request #\$currentRequestNumber : " +
               "'\$request.servletPath'/'\$request.forwardURI', " +
               "from \$request.remoteHost (\$request.remoteAddr) " +
               " at \${new Date()}, Ajax: \$request.xhr, controller: \$controllerName, " +
               "action: \$actionName, params: \${new TreeMap(params)}"

            return true
         }

         after = { Map model ->

            if (!log.debugEnabled) return true

            long start = request[START_TIME_ATTRIBUTE]
            long end = System.currentTimeMillis()
            long requestNumber = request[REQUEST_NUMBER_ATTRIBUTE]

            def msg = "postHandle request #\$requestNumber: end \${new Date()}, " +
                      "controller total time \${end - start}ms"
            if (log.traceEnabled) {
            	log.trace msg + "; model: \$model"
            }
            else {
            	log.debug msg
            }
         }

         afterView = { Exception e ->

            if (!log.debugEnabled) return true

            long start = request[START_TIME_ATTRIBUTE]
            long end = System.currentTimeMillis()
            long requestNumber = request[REQUEST_NUMBER_ATTRIBUTE]

            def msg = "afterCompletion request #\$requestNumber: " +
                      "end \${new Date()}, total time \${end - start}ms"
            if (e) {
               log.debug "\$msg \\\n\\\texception: \$e.message", e
            }
            else {
               log.debug msg
            }
         }
      }
   }
}
{code}

在这个日志示例中，我们只记录不同请求的信息，但要注意到@after@过滤器中的@model@是可变的。如果你需要增加或者移除model的内容，可以在@after@过滤器中实现。
