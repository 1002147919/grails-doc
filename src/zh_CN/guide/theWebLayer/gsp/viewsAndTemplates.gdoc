{hidden}
Grails also has the concept of templates. These are useful for partitioning your views into maintainable chunks, and combined with [Layouts|guide:layouts] provide a highly re-usable mechanism for structured views.

h4. Template Basics

Grails uses the convention of placing an underscore before the name of a view to identify it as a template. For example, you might have a template that renders Books located at @grails-app/views/book/_bookTemplate.gsp@:

{code:xml}
<div class="book" id="${book?.id}">
   <div>Title: ${book?.title}</div>
   <div>Author: ${book?.author?.name}</div>
</div>
{code}

Use the [render|tags] tag to render this template from one of the views in @grails-app/views/book@:

{code:xml}
<g:render template="bookTemplate" model="[book: myBook]" />
{code}

Notice how we pass into a model to use using the @model@ attribute of the @render@ tag. If you have multiple @Book@ instances you can also render the template for each @Book@ using the render tag with a @collection@ attribute:

{code:xml}
<g:render template="bookTemplate" var="book" collection="${bookList}" />
{code}
{hidden}

Grails也有模板的概念。这对于将你的视图分割成可维护的模块也是颇有裨益的，并且结合[布局|guide:layouts]还可为结构化视图提供一个高复用机制。

h4. 模板基础

Grails使用在其视图名称前放置一个下划线的方式来标识一个模板。比如，你可能有一个渲染Books的模板，位于@grails-app/views/book/_bookTemplate.gsp@：

{code:xml}
<div class="book" id="${book?.id}">
   <div>Title: ${book?.title}</div>
   <div>Author: ${book?.author?.name}</div>
</div>
{code}

你可以在@grails-app/views/book@中的一个视图中，使用[render|tags]标签来渲染此模板：

{code:xml}
<g:render template="bookTemplate" model="[book: myBook]" />
{code}

注意，我们是怎样使用@render@标签的@model@属性来传递模型的。如果你有多个@Book@实例，你还可以通过@render@标签的@collection@属性来为每一个@Book@渲染模板：

{code:xml}
<g:render template="bookTemplate" var="book" collection="${bookList}" />
{code}

{hidden}
h4. Shared Templates

In the previous example we had a template that was specific to the @BookController@ and its views at @grails-app/views/book@. However, you may want to share templates across your application.

In this case you can place them in the root views directory at grails-app/views or any subdirectory below that location, and then with the template attribute use an absolute location starting with @/@ instead of a relative location. For example if you had a template called @grails-app/views/shared/_mySharedTemplate.gsp@, you would reference it as:

{code:xml}
<g:render template="/shared/mySharedTemplate" />
{code}

You can also use this technique to reference templates in any directory from any view or controller:

{code:xml}
<g:render template="/book/bookTemplate" model="[book: myBook]" />
{code}
{hidden}

h4. 共享的模板

在上一个示例中，我们有了一个跟@BookController@相关的模板，其视图都位于@grails-app/views/book@中。然而，有时候，你可能想将你的模板在整个应用中共享。

在这种情况下，你可以将模板放在grails-app/views这个视图根目录下，或者跟目录下的任意子目录中，然后在template属性中使用以@/@开头的绝对位置而非相对位置。比如，你有一个@grails-app/views/shared/_mySharedTemplate.gsp@模板，你就可以这样引用：

{code:xml}
<g:render template="/shared/mySharedTemplate" />
{code}

你也可以使用此技术来引用来自视图或者控制器的任意目录模板：

{code:xml}
<g:render template="/book/bookTemplate" model="[book: myBook]" />
{code}

{hidden}
h4. The Template Namespace

Since templates are used so frequently there is template namespace, called @tmpl@, available that makes using templates easier. Consider for example the following usage pattern:

{code:xml}
<g:render template="bookTemplate" model="[book:myBook]" />
{code}

This can be expressed with the @tmpl@ namespace as follows:

{code:xml}
<tmpl:bookTemplate book="${myBook}" />
{code}
{hidden}

h4. 模板的命名空间

因为模板是如此频繁地被使用，因此@tmpl@这个模板命名空间就产生了，这样模板的使用也更简易。比如下例所示地用法：

{code:xml}
<g:render template="bookTemplate" model="[book:myBook]" />
{code}

使用了@tmpl@命名空间的表达如下所示：

{code:xml}
<tmpl:bookTemplate book="${myBook}" />
{code}

{hidden}
h4. Templates in Controllers and Tag Libraries

You can also render templates from controllers using the [render|controllers] controller method. This is useful for [Ajax|guide:ajax] applications where you generate small HTML or data responses to partially update the current page instead of performing new request:

{code:java}
def bookData() {
    def b = Book.get(params.id)
    render(template:"bookTemplate", model:[book:b])
}
{code}

The [render|controllers] controller method writes directly to the response, which is the most common behaviour. To instead obtain the result of template as a String you can use the [render|tags] tag:

{code:java}
def bookData() {
    def b = Book.get(params.id)
    String content = g.render(template:"bookTemplate", model:[book:b])
    render content
}
{code}

Notice the usage of the @g@ namespace which tells Grails we want to use the [tag as method call|guide:tagsAsMethodCalls] instead of the [render|controllers] method.
{hidden}

h4. 控制器和标签库的模板

你还可以在控制器中使用[render|controllers]方法来渲染模板。这在[Ajax|guide:ajax]的应用中是非常有用的，你可以通过生成小的HTML或者数据响应来部分的更新当前页面，而不是发起一个新的请求：

{code:java}
def bookData() {
    def b = Book.get(params.id)
    render(template:"bookTemplate", model:[book:b])
}
{code}

通常情况下，控制器的[render|controllers]方法直接将内容写回到响应器中。如果你只想获得模板的String结果，你可以使用[render|tags]标签：

{code:java}
def bookData() {
    def b = Book.get(params.id)
    String content = g.render(template:"bookTemplate", model:[book:b])
    render content
}
{code}

请注意@g@命名空间的用法，它会让Grails知道我们想用[标签的方法调用|guide:tagsAsMethodCalls]，而不是[render|controllers]方法。
