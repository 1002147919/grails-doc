{hidden}
Grails 2.0 integrates with the [Resources plugin|http://grails.org/plugin/resources] to provide sophisticated static resource management. This plugin is installed by default in new Grails applications.

The basic way to include a link to a static resource in your application is to use the [resource|tags] tag. This simple approach creates a URI pointing to the file.

However modern applications with dependencies on multiple JavaScript and CSS libraries and frameworks (as well as dependencies on multiple Grails plugins) require something more powerful.

The issues that the Resources framework tackles are:

* Web application performance tuning is difficult
* Correct ordering of resources, and deferred inclusion of JavaScript
* Resources that depend on others that must be loaded first
* The need for a standard way to expose static resources in plugins and applications
* The need for an extensible processing chain to optimize resources
* Preventing multiple inclusion of the same resource

The plugin achieves this by introducing new artefacts and processing the resources using the server's local file system.

It adds artefacts for declaring resources, for declaring "mappers" that can process resources, and a servlet filter to serve processed resources.

What you get is an incredibly advanced resource system that enables you to easily create highly optimized web applications that run the same in development and in production.

The Resources plugin documentation provides a more detailed overview of the [concepts|http://grails-plugins.github.com/grails-resources/] which will be beneficial when reading the following guide.
{hidden}

Grails 2.0集成了[资源插件|http://grails.org/plugin/resources]以提供更复杂的静态资源管理。此插件在新建Grails应用中是缺省安装的。

在你的应用中要引用一个静态资源链接的基本方法，就是使用[resource|tags]标签。此种方式会创建一个指向文件的URI。

但是，现在的应用往往会依赖于多个JavaScript、CSS库和框架（即依赖于多个Grails插件），这就要求一些更强大的功能来支撑。

本资源（Resources）框架要解决的主要问题如下：

* Web应用的性能调优是非常困难的
* 正确地对资源排序，推迟引用JavaScript
* 依赖于其他的资源必须要优先加载
* 在插件和应用中需要采用一种标准的方式来暴露静态资源
* 需要扩展性更好的处理链来优化资源
* 阻止同样的资源被多次引用

本插件通过引入新的工件（artefacts）和服务器端的本地文件系统来达到上述目标。

新增的工件用以声明资源，这些声明式的“映射（mappers）”可以对资源进行处理，一个servlet过滤器使用那些被处理过的资源。

通过此高级的资源系统，你能得到的不可思议结果是，在同样的开发和生产环境中，你能够轻松地创建高优化的web应用。

资源插件的官方文档提供了更详细的[概念|http://grails-plugins.github.com/grails-resources/]概述，对于阅读后续的内容，颇有裨益。
