{hidden}
Grails has built in support for [Content negotiation|http://en.wikipedia.org/wiki/Content_negotiation] using either the HTTP @Accept@ header, an explicit format request parameter or the extension of a mapped URI.
{hidden}

Grails通过HTTP的@Accept@报头（显式的参数请求方式）或者扩展的URI映射来提供对[内容协商|http://en.wikipedia.org/wiki/Content_negotiation]的支持。

{hidden}
h4. Configuring Mime Types

Before you can start dealing with content negotiation you need to tell Grails what content types you wish to support. By default Grails comes configured with a number of different content types within @grails-app/conf/Config.groovy@ using the @grails.mime.types@ setting:

{code:java}
grails.mime.types = [ xml: ['text/xml', 'application/xml'],
                      text: 'text-plain',
                      js: 'text/javascript',
                      rss: 'application/rss+xml',
                      atom: 'application/atom+xml',
                      css: 'text/css',
                      csv: 'text/csv',
                      all: '*/*',
                      json: 'text/json',
                      html: ['text/html','application/xhtml+xml']
                    ]
{code}

The above bit of configuration allows Grails to detect to format of a request containing either the 'text/xml' or 'application/xml' media types as simply 'xml'. You can add your own types by simply adding new entries into the map.
{hidden}

h4. 配置Mime类型

在你开始处理内容协商之前，你必须告诉Grails需要支持什么样的内容类型。缺省情况下，Grails将根据@grails-app/conf/Config.groovy@中的@grails.mime.types@设置来配置相关的内容类型：

{code:java}
grails.mime.types = [ xml: ['text/xml', 'application/xml'],
                      text: 'text-plain',
                      js: 'text/javascript',
                      rss: 'application/rss+xml',
                      atom: 'application/atom+xml',
                      css: 'text/css',
                      csv: 'text/csv',
                      all: '*/*',
                      json: 'text/json',
                      html: ['text/html','application/xhtml+xml']
                    ]
{code}

上述示例的配置块中，Grails将媒体类型为'text/xml'或'application/xml'的请求都只当做'xml'看待。你也可以添加自己的类型到类型为map的参数中。


{hidden}
h4. Content Negotiation using the Accept header

Every incoming HTTP request has a special [Accept|http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html] header that defines what media types (or mime types) a client can "accept". In older browsers this is typically:

{code:java}
*/*
{code}

Which simply means anything. However, on newer browser something all together more useful is sent such as (an example of a Firefox @Accept@ header):

{code}
text/xml, application/xml, application/xhtml+xml, text/html;q=0.9,
text/plain;q=0.8, image/png, */*;q=0.5
{code}

Grails parses this incoming format and adds a @property@ to the [response|servletAPI] object that outlines the preferred response format. For the above example the following assertion would pass:

{code:java}
assert 'html' == response.format
{code}

Why? The @text/html@ media type has the highest "quality" rating of 0.9, therefore is the highest priority. If you have an older browser as mentioned previously the result is slightly different:

{code:java}
assert 'all' == response.format
{code}

In this case 'all' possible formats are accepted by the client. To deal with different kinds of requests from [Controllers|guide:controllers] you can use the [withFormat|controllers] method that acts as kind of a switch statement:

{code:java}
import grails.converters.XML

class BookController {

    def list() {
        def books = Book.list()
        withFormat {
            html bookList: books
            js { render "alert('hello')" }
            xml { render books as XML }
        }
    }
}
{code}

If the preferred format is @html@ then Grails will execute the @html()@ call only. This causes Grails to look for a view called either @grails-app/views/books/list.html.gsp@ or @grails-app/views/books/list.gsp@. If the format is @xml@ then the closure will be invoked and an XML response rendered.

How do we handle the "all" format? Simply order the content-types within your @withFormat@ block so that whichever one you want executed comes first. So in the above example, "all" will trigger the @html@ handler.

{note}
When using [withFormat|controllers] make sure it is the last call in your controller action as the return value of the @withFormat@ method is used by the action to dictate what happens next.
{note}
{hidden}

h4. 使用Accept报头的内容协商

每一个发送的HTTP请求都有个特别的[Accept|http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html]报头，它定义了客户端能“接受”什么样的媒体类型(或mime类型)。这个在旧的浏览器中通常是：

{code:java}
*/*
{code}

用以简单的表示任何事物。然而，在较新的浏览器中，更多有用的信息将被起发送（比如一个Firefox的@Accept@报头）：

{code}
text/xml, application/xml, application/xhtml+xml, text/html;q=0.9,
text/plain;q=0.8, image/png, */*;q=0.5
{code}

Grails解析这个输入格式，并为[response|servletAPI]对象添加一个优先响应此格式的@property@，比如上述示例，如下的断言将会通过：

{code:java}
assert 'html' == response.format
{code}

为什么呢？这个@text/html@媒体类型拥有的最高"质量"等级是0.9，因此，具有最高优先权。上述同样的示例如果在旧浏览器结果会有些稍微不同：

{code:java}
assert 'all' == response.format
{code}

此处的'all'格式是被客户端所接受的。 要在[控制器|guide:controllers]中处理这些不同类型的请求，你可以使用[withFormat|controllers]方法，其跟switch语句类似：

{code:java}
import grails.converters.XML

class BookController {

    def list() {
        def books = Book.list()
        withFormat {
            html bookList: books
            js { render "alert('hello')" }
            xml { render books as XML }
        }
    }
}
{code}

如果优先格式是@html@，那么Grails将仅仅执行@html()@的调用。这将导致Grails查找名称为@grails-app/views/books/list.html.gsp@或者@grails-app/views/books/list.gsp@视图。 如果是@xml@格式，那么响应的必包将会被调用，并且渲染为一个XML响应。

那么我们该如何处理那个"all"格式呢？这要看你@withFormat@代码块中内容类型（content-types）的顺序了。以上述代码为例，"all"将触发@html@的处理。

{note}
在使用[withFormat|controllers]的时候，请确保它是控制器操作的最后一个调用，如此控制器才能知道下一步要做什么。
{note}

{hidden}
h4. Request format vs. Response format

As of Grails 2.0, there is a separate notion of the _request_ format and the _response_ format. The request format is dictated by the @CONTENT_TYPE@ header and is typically used to detect if the incoming request can be parsed into XML or JSON, whilst the response format uses the file extension, format parameter or ACCEPT header to attempt to deliver an appropriate response to the client.

The [withFormat|controllers] available on controllers deals specifically with the response format. If you wish to add logic that deals with the request format then you can do so using a separate @withFormat@ method available on the request:

{code:java}
request.withFormat {
    xml {
        // read XML
    }
    json {
        // read JSON
    }
}
{code}
{hidden}

h4. 请求格式和响应格式

从Grails 2.0以来，就单独提出了 _request_ 和 _response_ 格式的概念。对于请求格式，通常是由@CONTENT_TYPE@报头决定的，并且用以检测收入的请求是否可以被解析为XML或者JSON。而响应格式通常是由文件扩展名、参数格式或者ACCEPT报头决定，并且尝试以合适的响应返回给客户端。

控制器的[withFormat|controllers]方法是针对响应格式而言的。如果你想增加请求格式的逻辑处理，需要单独使用request对象的@withFormat@方法：

{code:java}
request.withFormat {
    xml {
        // read XML
    }
    json {
        // read JSON
    }
}
{code}

{hidden}
h4. Content Negotiation with the format Request Parameter

If fiddling with request headers if not your favorite activity you can override the format used by specifying a @format@ request parameter:

{code:java}
/book/list?format=xml
{code}

You can also define this parameter in the [URL Mappings|guide:urlmappings] definition:

{code:java}
"/book/list"(controller:"book", action:"list") {
    format = "xml"
}
{code}
{hidden}

h4. 请求参数格式的内容协商

如果不喜欢摆弄这些请求报头，你可以通过指定请求参数的@format@来覆盖这些格式：

{code:java}
/book/list?format=xml
{code}

你也可以将此参数定义在[URL映射|guide:urlmappings]中，比如

{code:java}
"/book/list"(controller:"book", action:"list") {
    format = "xml"
}
{code}

{hidden}
h4. Content Negotiation with URI Extensions

Grails also supports content negotiation using URI extensions. For example given the following URI:

{code:java}
/book/list.xml
{code}

Grails will remove the extension and map it to @/book/list@ instead whilst simultaneously setting the content format to @xml@ based on this extension. This behaviour is enabled by default, so if you wish to turn it off, you must set the @grails.mime.file.extensions@ property in @grails-app/conf/Config.groovy@ to @false@:

{code:java}
grails.mime.file.extensions = false
{code}
{hidden}

h4. URI扩展的内容协商

Grails还提供了对扩展URI的内容协商的支持。比如下面URI示例：

{code:java}
/book/list.xml
{code}

Grails将移除其扩展后缀，而且将其映射为@/book/list@。与此同时，设置此内容格式为@xml@。缺省情况下，此行为是开启的。如果你想要关闭它，只需要设置@grails-app/conf/Config.groovy@中的@grails.mime.file.extensions@属性为@false@即可：

{code:java}
grails.mime.file.extensions = false
{code}

{hidden}
h4. Testing Content Negotiation

To test content negotiation in a unit or integration test (see the section on [Testing|guide:testing]) you can either manipulate the incoming request headers:

{code:java}
void testJavascriptOutput() {
    def controller = new TestController()
    controller.request.addHeader "Accept",
              "text/javascript, text/html, application/xml, text/xml, */*"

    controller.testAction()
    assertEquals "alert('hello')", controller.response.contentAsString
}
{code}

Or you can set the format parameter to achieve a similar effect:

{code:java}
void testJavascriptOutput() {
    def controller = new TestController()
    controller.params.format = 'js'

    controller.testAction()
    assertEquals "alert('hello')", controller.response.contentAsString
}
{code}
{hidden}

h4. 测试内容协商

要在单元或者集成测试（请参考[测试|guide:testing]章节）中测试内容协商，你可以操作输入请求的报头方式进行，比如：

{code:java}
void testJavascriptOutput() {
    def controller = new TestController()
    controller.request.addHeader "Accept",
              "text/javascript, text/html, application/xml, text/xml, */*"

    controller.testAction()
    assertEquals "alert('hello')", controller.response.contentAsString
}
{code}

或者设置参数格式的方式来达到类似的效果：

{code:java}
void testJavascriptOutput() {
    def controller = new TestController()
    controller.params.format = 'js'

    controller.testAction()
    assertEquals "alert('hello')", controller.response.contentAsString
}
{code}
