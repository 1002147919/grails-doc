h3. Understanding Transactions and the Hibernate Session

When using transactions there are important considerations you need to take into account with regards to how the underlying persistence session is handled by Hibernate. When a transaction is rolled back the Hibernate session used by GORM is cleared. This means any objects within the session become detached and accessing collections could lead to a @LazyInitializationException@.

To understand why it is important that the Hibernate session is cleared. Consider the following example:

{code}
class Author {
	String name
	int age
	static hasMany = [books:Book]
}
{code}


If you were to save 2 authors using consecutive transactions as follows:

{code}
Author.withTransaction { status ->
   new Author(name:"Stephen King", age:40).save()
   status.setRollbackOnly()
}
Author.withTransaction { status ->
   new Author(name:"Stephen King", age:40).save()
}
{code}

Only the last author would be saved since the first transaction rolls back the author save by clearing the Hibernate session. If the Hibernate session were not cleared then both author instance would be persisted and it would lead to very unexpected results.

It can, however, be frustrating to get @LazyInitializationException@ due to the session being cleared. 

For example, consider the following example:


{code}
class AuthorService {
	
	static transactional = true
	
	void updateAge(id, int age) {
		def author = Author.get(id)
		author.age = age
		if(author.age > 100) {
			throw new AuthorException("too old", author)
		}
	}
}
{code}

{code}
class AuthorController {
	AuthorService authorService
	def updateAge() {
		try {
			authorService.updateAge(params.id, params.int("age"))
		}
		catch(e) {
			render "Author books ${e.author.books}"
		}

	}
}
{code}

In the above example the transaction will be rolled back if the @Author@'s age exceeds 100 by throwing an @AuthorException@. The @AuthorException@ references the author but when the @books@ association is accessed a @LazyInitializationException@ will be thrown because the underlying Hibernate session has been cleared.

To solve this problem you have a number of options. One option is to ensure you query eagerly to get the data you are going to need:

{code}
class AuthorService {
	...	
	void updateAge(id, int age) {
		def author = Author.findById(id, [fetch:[books:"eager"]])
		...
{code}


In this example the @books@ association will be queried when retrieving the @Author@. 

{note}
This is the optimal solution as it requires fewer queries then the following suggested solutions.
{note}

Another, alternative solution is to redirect the request after a transaction rollback:

{code}
class AuthorController {
	AuthorService authorService
	def updateAge() {
		try {
			authorService.updateAge(params.id, params.int("age"))
		}
		catch(e) {
			flash.message "Can't update age"
			redirect action:"show", id:params.id
		}

	}
}
{code}		

In this case a new request will deal with retrieving the @Author@ again. And, finally a third solution is to retrieve the data for the @Author@ again to make sure the session remains in the correct state:

{code}
class AuthorController {
	AuthorService authorService
	def updateAge() {
		try {
			authorService.updateAge(params.id, params.int("age"))
		}
		catch(e) {
			def author = Author.read(params.id)
			render "Author books ${author.books}"
		}

	}
}
{code}

h3. Validation Errors and Rollback

A common use case is rollback a transaction if there are validation errors. For example consider this service:


{code}
import grails.validation.**
class AuthorService {
	
	static transactional = true
	
	void updateAge(id, int age) {
		def author = Author.get(id)
		author.age = age
		if(!age.validate()) {
			throw new ValidationException("Author is not valid", author.errors)
		}
	}
}
{code}

If you need to re-render the same view that a transaction was rolled back in you can re-associate the errors with a refreshed instance before rendering:

{code}
class AuthorController {
	AuthorService authorService
	def updateAge() {
		try {
			authorService.updateAge(params.id, params.int("age"))
		}
		catch(ValidationException e) {
			def author = Author.read(params.id)
			author.errors = e
			render view:"edit", model: [author:author]
		}

	}
}
{code}