h4. Available Scopes

Scopes are essentially hash like objects that allow you to store variables. The following scopes are available to controllers:

* [servletContext|controllers] - Also known as application scope, this scope allows you to share state across the entire web application. The servletContext is an instance of [javax.servlet.ServletContext|api:javax.servlet.ServletContext]
* [session|controllers] - The session allows associating state with a given user and typically uses cookies to associate a session with a client. The session object is an instance of [HttpSession|api:javax.servlet.http.HttpSession]
* [request|controllers] - The request object allows the storage of objects for the current request only. The request object is an instance of [HttpServletRequest|api:javax.servlet.http.HttpServletRequest]
* [params|controllers] - Mutable map of incoming request (CGI) parameters
* [flash|controllers] - See below.

h4. Accessing Scopes

Scopes can be accessed using the variable names above in combination with Groovy's array index operator even on classes provided by the Servlet API such as the [HttpServletRequest|api:javax.servlet.http.HttpServletRequest]:

{code:java}
class BookController {
    def find = {
        def findBy = params["findBy"]
        def appContext = request["foo"]
        def loggedUser = session["logged_user"]
    }
}
{code}

You can even access values within scopes using the de-reference operator making the syntax even clearer:

{code:java}
class BookController {
    def find = {
        def findBy = params.findBy
        def appContext = request.foo
        def loggedUser = session.logged_user
    }
}
{code}

This is one of the ways that Grails unifies access to the different scopes.

h4. Using Flash Scope

Grails supports the concept of [flash|controllers] scope is a temporary store for attributes which need to be available for this request and the next request only. Afterwards the attributes are cleared. This is useful for setting a message directly before redirection, for example:

{code:java}
def delete = {
    def b = Book.get( params.id )
    if (!b) {
        flash.message = "User not found for id ${params.id}"
        redirect(action:list)
    }
    ... // remaining code
}
{code}

h4. Scoped Controllers

By default, controllers are created for each request. In fact, because the controller is @prototype@ scoped, it is thread-safe and combines nicely with actions as properties.

You can change this behaviour by placing a controller in a particular scope. The supported scopes are:

* @prototype@ (default) - A new controller will be created per request (recommended for actions as properties)
* @session@ - A controller is created for the scope of a user session
* @singleton@ - Only one instance of the controller ever exists (recommended for actions as methods)

To enable one of the scopes, add a static scope property to your class whose value is one of the above:

{code:java}
static scope = "singleton"
{code}

You can define the default strategy under Config.groovy with the @grails.controllers.defaultScope@ key:

{code:java}
grails.controllers.defaultScope = "singleton"
{code}

{note}
Use the scoped controllers wisely, for instance, we don't recommend having any properties in a singleton scoped controller.
Setting a default scope different than @prototype@ may also leads to unexpected behaviors if you have controllers provided by installed grails plugins.
{note}