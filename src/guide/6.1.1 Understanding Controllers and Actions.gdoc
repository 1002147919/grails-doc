h4. Creating a controller

Controllers can be created with the [create-controller|commandLine] target. For example try running the following command from the root of a Grails project:

{code:java}
grails create-controller book
{code}

The command will result in the creation of a controller at the location @grails-app/controllers/BookController.groovy@:

{code:java}
class BookController { ... }
{code}

@BookController@ by default maps to the /book URI (relative to your application root).

{note}
The @create-controller@ command is merely for convenience and you can just as easily create controllers using your favorite text editor or IDE
{note}

h4. Creating Actions

A controller can have multiple properties that are each assigned a block of code. Each of these properties maps to a URI:

{code:java}
class BookController {
    def list = {

        // do controller logic
        // create model

        return model
    }
}
{code}

As

This example maps to the @/book/list@ URI by default thanks to the property being named @list@.

h4. Public Methods as Actions

Since Grails 1.4 you can write actions as public methods:

{code:java}
class BookController{

	def list(){
        // do controller logic
        // create model

        return model
	}
}
{code}

Leveraging methods instead of properties leads to some advantages:
* Memory efficient
* Allow use of stateless controllers (@singleton@ scope)

If you prefer the closure syntax and still want the method advantages, you can set the @grails.compile.artefacts.closures.convert@ to true in @BuildConfig.groovy@.
{code}
grails.compile.artefacts.closures.convert=true
{code}

h4. The Default Action

A controller has the concept of a default URI that maps to the root URI of the controller. By default the default URI in this case is @/book@. The default URI is dictated by the following rules:

* If only one action is present the default URI for a controller maps to that action.
* If you define an @index@ action which is the action that handles requests when no action is specified in the URI @/book@
* Alternatively you can set it explicitly with the @defaultAction@ property:

{code:java}
static defaultAction = "list"
{code}
