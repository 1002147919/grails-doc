Regular Grails plugins are packaged as zip files containing the full source of the plugin. This has some advantages in terms of being an open distribution system (anyone can see the source), in addition to avoiding problems with the source compatibility level used for compilation.

As of Grails 1.4 you can pre-compile Grails plugins into regular JAR files known as "binary plugins". This has several advantages (and some disadvantages as discussed in the advantages of source plugins above) including:

* Binary plugins can be published as standard JAR files to a Maven repository
* Binary plugins can be declared like any other JAR dependency 
* Commercial plugins are more viable since the source isn't published
* IDEs have a better understanding since binary plugins are regular JAR files containing classes

h4. Packaging

To package a plugin in binary form you can use the package-plugin command and the @--binary@ flag:

{code}
grails package-plugin --binary
{code}

Supported artefacts include:

* Grails classes such as controllers, domain classes and so on
* I18n Message bundles
* GSP Views, layouts and templates

You can also specify the packaging in the plugin descriptor:

{code}
def packaging = "binary"
{code}

In which case the packaging will always default to binary. 

h4. Using Binary Plugins

The packaging process will create a JAR file within the @target@ directory of the plugin such as @target/foo-plugin-0.1.jar@. To use this plugin you have a couple of options.

You can drop the plugin into your applications @lib@ directory or if you publish the plugin to a compatible Maven repository you can declare the plugin as a dependency in your @grails-app/conf/BuildConfig.groovy@ file:

{code}
dependencies {
	compile "mycompany:myplugin:0.1"
}
{code}

{note}
With binary plugins you need to declare the dependency within the @dependencies@ block not within the @plugins@ block as you may be naturally inclined to do. The @plugins@ block is used for declaring source plugins that are packaged as zip files
{note}




