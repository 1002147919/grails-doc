The @upgrade@ command has been removed from Grails 2.4.  The procedure for upgrading to the latest version of Grails will be detailed in the user guide from now on.  Below are steps that must be taken to upgrade an application from 2.3.x to 2.4.


h4. The set-grails-version Command

The [set-grails-version|commandLine] command should be run to update the application's metadata to indicate which version of Grails the application is built with.

h4. Update to latest Plugin versions

You should update your application's @BuildConfig@ to use the latest plugins compatible with Grails 2.3. Example:

{code:none}
    plugins {
        // plugins for the build system only
        build ':tomcat:7.0.52.1'

        // plugins for the compile step
        compile ':scaffolding:2.1.0'
        compile ':cache:1.1.3'
        compile ':asset-pipeline:1.8.3'

        // plugins needed at runtime but not for compilation
        runtime ':hibernate4:4.3.5.2' // or ':hibernate:3.6.10.14'
        runtime ':database-migration:1.4.0'
        runtime ':jquery:1.11.0.2'
        ...
    }
{code}

You may get compilation errors or incompatibility problems with older versions of the above plugins installed.

h4. grails-debug Script Has Been Removed

The @grails-debug@ and @grails-debug.bat@ scripts have been removed.  To debug the build system JVM run @grails -debug <command>@ and to debug the forked JVM run @grails --debug-fork <command>@.

h4. New Command Object Data Binding Behavior

The data binding behavior for command objects have changed in Grails 2.4.  Request parameter names may now be prefixed with the name of the controller action argument name that the request parameter should be bound to.  For example, if a request is made to the @buy@ action in the controller below a request parameter named @buyer.name@ will be bound to the @name@ property of the @buyer@ argument and a request parameter named @seller.name@ will be bound to the @name@ property of the @seller@ argument.

h4. Nullable Command Object Properties

The behavior in Grails 2.3.x is such that constrained properties in command objects and other classes marked with \@Validateable are all configured with @nullable: false@ by default.  Unconstrained properties were not configured with @nullable: false@.  In Grails 2.4 all non-static unconstrained properties in command object classes and other classes marked with \@Validateable are all configured with @nullable: false@.


{code:java}
class StoreController {
    def buy(Person buyer, Person seller) {
        // ...
    }
}

class Person {
    String name
}
{code}

See the [Command Objects documentation|guide:commandObjects] for more details.

h4. Ajax Tags Have Been Deprecated

The [formRemote|tags], [remoteField|tags], [remoteFunction|tags] and [remoteLink|tags] Ajax tags have been deprecated and will be removed from a future version of Grails.  Applications may provide their own Ajax tags and/or Javascript plugins may provide Ajax tags of their own.

h4. The resources Plugin

As of Grails 2.4 the @resources@ plugin has been replaced with the @asset-pipeline@ plugin as the default resource management plugin for newly created applications.  See the [static resource abstraction|guide:resources] section of the User Guide for more details.  When upgrading an application to Grails 2.4 if you choose to continue using the resources plugin you will need to use version 1.2.7 or later as previous versions of the plugin are not compatible with Grails 2.4.

h4. Static Holder Classes

The following deprecated classes have been removed from Grails 2.4.x:

* @org.codehaus.groovy.grails.commons.ApplicationHolder@ 
* @org.codehaus.groovy.grails.commons.ConfigurationHolder@ 
* @org.codehaus.groovy.grails.plugins.PluginManagerHolder@
* @org.codehaus.groovy.grails.web.context.ServletContextHolder@
* @org.codehaus.groovy.grails.compiler.support.GrailsResourceLoaderHolder@

If you or any plugins you have installed are using these classes you will get a compilation error. The problem can be rectified by updating to new plugins and using @grails.util.Holders@ instead.

{note}
If your application uses the jquery plugin you will need to update to version 1.11.0.2 or later as previous versions of the plugin made use of the @ApplicationHolder@ class.  If your application uses the resources plugin you will need to update to version 1.2.7 or later as previous versions of the plugin made use of the @ConfigurationHolder@ class.
{note}

h4. Changes To applicationContex.xml

The @web-app/WEB-INF/applicationContext.xml@ file contains a bean definition for a @grailsResourceLoader@ bean which is an instance of @org.codehaus.groovy.grails.commons.GrailsResourceLoaderFactoryBean@.  That bean definition needs to be removed from the file.  The @grailsApplication@ bean may have the @grailsResourceLoader@ bean injected into it as shown below.

{code:java}
<bean id="grailsApplication" class="org.codehaus.groovy.grails.commons.GrailsApplicationFactoryBean">
    <description>Grails application factory bean</description>
    <property name="grailsDescriptor" value="/WEB-INF/grails.xml" />
    <property name="grailsResourceLoader" ref="grailsResourceLoader" />
</bean>
{code}

The @grailsApplication@ bean definition should be left in the file but the @grailsResourceLoader@ bean reference should be removed as shown below.

{code:java}
<bean id="grailsApplication" class="org.codehaus.groovy.grails.commons.GrailsApplicationFactoryBean">
    <description>Grails application factory bean</description>
    <property name="grailsDescriptor" value="/WEB-INF/grails.xml" />
</bean>
{code}

h4. Data Binding Changes

Prior to Grails 2.4 when data binding was performed with the @params@ object in a controller, if the request contained a body the body would be parsed and used for data binding instead of the @params@ object.  In Grails 2.4 this behavior has changed so that if binding is initiated with @params@, the binding will always be done with the @params@ object, without regard to whether or not the request has a body.  If binding is done with the @request@ object, if the request has a body then the body will be parsed and used for data binding, otherwise the request parameters will be used for data binding.

{code:java}
class SomeController {

    def someAction() {
        // Prior to Grails 2.4 if the request contains a body
        // then obj1 will be populated with values parsed from
        // the body instead of with values in params.

        // With Grails 2.4 obj1 will be pouplated with values
        // in params.
        def obj1 = new SomeDomainClass(params)

        // the same is true for the following
        def obj2 = new SomeDomainClass()
        obj2.properties = params
    }

    def someOtherAction() {
        // If the request contains a body then obj1 will be
        // populated with values parsed from the body, otherwise
        // obj1 will be populated with the request parameters.

        // This is not a new change in behavior.
        def obj1 = new SomeDomainClass()
        obj1.properties = request
    }
}
{code}
