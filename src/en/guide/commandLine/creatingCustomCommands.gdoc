
You can create your own commands by running the [create-command|commandLine] command from the root of your project. For example the following command will create a command called @grails-app/commands/HelloWorldCommand@:

{code}
grails create-command HelloWorld
{code}

{note}
Unlike scripts, commands cause the Grails environment to start and you have full access to the application context and the runtime.
{note}

Since Grails 3.2.0, commands have similar abilities as scripts in regards to retrieving arguments, template generation, file access, and model building.

If you created a command in a previous version of grails, you can update your command to have those abilities by changing which trait you are implementing.

Commands created in Grails 3.1.x or lower implement the [ApplicationCommand|api:grails.dev.commands.ApplicationCommand] trait by default which requires your command to implement the following method:

{code}
boolean handle(ExecutionContext executionContext)
{code}

Commands created in Grails 3.2.0 or higher implement the [GrailsApplicationCommand|api:grails.dev.commands.GrailsApplicationCommand] trait by default which requires your command to implement the following method:

{code}
boolean handle()
{code}

{note}
Commands defined this way still have access to the execution context via a variable called "executionContext".
{note}