A profile is a simple directory that contains a @profile.yml@ file and directorys containing the "commands", "skeleton" and "templates" defined by the profile. Example:

{code}
web
    * commands
        * create-controller.yml
        * run-app.groovy    
        ...
    * features
        * asset-pipeline
            * skeleton
            * feature.yml
    * skeleton
        * grails-app
            * controllers
            ...
        * build.gradle
    * templates
        * artifacts
            * Controller.groovy
    * profile.yml
{code}

The above example is a snippet of structure of the 'web' profile. The @profile.yml@ file is used to describe the profile and control how a the build is configured. The @profile.yml@ can contain the following child elements.

h4. 1) repositories

A list of Maven repositories. Example:

{code}
repositories:
    - "https://repo.grails.org/grails/core"
{code}

h4. 2) build.plugins

A list of Gradle plugins to configure. Example:

{code}
build:
    plugins:
        - eclipse
        - idea
        - org.grails.grails-core
{code}

h4. 3) build.excludes

A list of Gradle plugins to exclude from being inherited from the parent profile:

{code}
build:
    excludes:
        - org.grails.grails-core
{code}

h4. 4) dependencies

A map of scopes and dependencies to configure. The @excludes@ scope can be used to exclude from the parent profile. Example:

{code}
dependencies:
    excludes:
        - "org.grails:hibernate"
    build:
        - "org.grails:grails-gradle-plugin:$grailsVersion" 
    compile:
        - "org.springframework.boot:spring-boot-starter-logging"
        - "org.springframework.boot:spring-boot-autoconfigure"
{code}

h4. 5) features.defaults

A default list of features to use if no explicit features are specified.

{code}
features:
    defaults: 
        - hibernate
        - asset-pipeline    
{code}


As you can see it contains the description of the profile and a definition of which profiles this profile extends, since one profile can extend from another.

When the @create-app@ command runs it takes the skeleton of the parent profiles and copies the skeletons into a new project structure. Child profiles overwrite files from the parent profile so if the parent defines a @build.gradle@ then the child profile will override the parent.