h4. Remote Repositories

Initially your BuildConfig.groovy does not use any remote public Maven repositories. There is a default @grailsHome()@ repository that will locate the JAR files Grails needs from your Grails installation. To use a public repository, specify it in the @repositories@ block:

{code}
repositories {
    mavenCentral()
}
{code}

In this case the default public Maven repository is specified.

You can also specify a specific Maven repository to use by URL:

{code}
repositories {
    mavenRepo "http://repository.codehaus.org"
}
{code}

and even give it a name:

{code}
repositories {
    mavenRepo name: "Codehaus", root: "http://repository.codehaus.org"
}
{code}

so that you can easily identify it in logs.

h4. Offline Mode

There are times when it is not desirable to connect to any remote repositories (whilst working on the train for example!). In this case you can use the @offline@ flag to execute Grails commands and Grails will not connect to any remote repositories:

{code}
grails --offline run-app
{code}

{note}
Note that this command will fail if you do not have the necessary dependencies in your local Maven cache
{note}

You can also globally configure offline mode by setting @grails.offline.mode@ to @true@ in @~/.grails/settings.groovy@ or in your project's @BuildConfig.groovy@ file:

{code}
grails.offline.mode=true
{code}

To specify your local Maven cache (@~/.m2/repository@) as a repository:

{code}
repositories {
    mavenLocal()
}
{code}

h4. Authentication with Aether

To authenticate with Aether you can either define the credentials on the repository definition:

{code}
mavenRepo(url:"http://localhost:8082/myrepo") {
    auth username: "foo", password: "bar"
}
{code}

Or you can specify an @id@ on the repository:

{code}
mavenRepo(id:'myrepo', url:"http://localhost:8082/myrepo")
{code}

And then declare your credentials in @USER_HOME/.grails/settings.groovy@:

{code}
grails.project.dependency.authentication = {
    credentials {
        id = "myrepo"
        username = "admin"
        password = "password"
    }
}
{code}

h4. Authentication with Ivy

If your repository requires authentication you can configure this using a @credentials@ block:

{code}
credentials {
    realm = ".."
    host = "localhost"
    username = "myuser"
    password = "mypass"
}
{code}

This can be placed in your @USER_HOME/.grails/settings.groovy@ file using the @grails.project.ivy.authentication@ setting:

{code}
grails.project.ivy.authentication = {
    credentials {
        realm = ".."
        host = "localhost"
        username = "myuser"
        password = "mypass"
    }
}
{code}
