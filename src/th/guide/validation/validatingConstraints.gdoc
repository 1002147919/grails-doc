h4. Validation Basics

{hidden}
Call the [validate|domainClasses] method to validate a domain class instance:
{hidden}

เรียกใช้ [validate|domainClasses] เพื่อการตรวจสอบความผิดพลาดของ โดเมน

{code:java}
def user = new User(params)

if (user.validate()) {
    // do something with user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}

{hidden}
The @errors@ property on domain classes is an instance of the Spring [Errors|api:org.springframework.validation.Errors] interface. The @Errors@ interface provides methods to navigate the validation errors and also retrieve the original values.
{hidden}

ค่า @errors@ ในโดเมนเป้น instance ของอินเตอร์เฟส [Errors|api:org.springframework.validation.Errors] ในสปริง @Errors@ อินเตอร์เฟสจะสามารถเรียกใช้ method เพื่อการหาข้อผิดพลาดและการเรียกข้อมูลที่ผิดพลาดขึ้นมาได้ด้วย

h4. Validation Phases

{hidden}
Within Grails there are two phases of validation, the first one being [data binding|guide:dataBinding] which occurs when you bind request parameters onto an instance such as:
{hidden}

ใน Grails จะมีสองระดับในการตรวจสอบความผิดพลาด ระดับที่หนึ่งคือ [data binding|guide:dataBinding] ที่จะเกิดขึ้นเมื่อคุณเรียกข้อมูลจาก instance หนึ่งๆเช่น

{code:java}
def user = new User(params)
{code}

{hidden}
At this point you may already have errors in the @errors@ property due to type conversion (such as converting Strings to Dates). You can check these and obtain the original input value using the @Errors@ API:
{hidden}

โดยในจุดนี้คุณสามารถมีข้อผิดพลาดได้จากการเปลี่ยนกลับของ type เช่น เปลี่ยนจาก Strings เป็น Dates คุณสามารถตรวจสอบได้โดยการใช้ @Errors@ 

{code:java}
if (user.hasErrors()) {
    if (user.errors.hasFieldErrors("login")) {
        println user.errors.getFieldError("login").rejectedValue
    }
}
{code}

{hidden}
The second phase of validation happens when you call [validate|domainClasses] or [save|domainClasses]. This is when Grails will validate the bound values againts the [constraints|domainClasses] you defined. For example, by default the [save|domainClasses] method calls @validate@ before executing, allowing you to write code like:
{hidden}

ระดับที่สองจะเกิดขึ้นเมื่อคุณเรียกใช้ [validate|domainClasses] หรือ [save|domainClasses] ในขั้นตอนนี้ Grails จะทำการตรวจสอบค่ากับ [constraints|domainClasses] ที่คุณกำหนดไว้ เช่น โดยปกติแล้ว [save|domainClasses] จะเรียกใช้ @validate@ ก่อนที่จะทำการใดๆโดยคุณก็จะสามารถเขียนโค๊ดได้ตามตัวอย่างด้านล่าง

{code:java}
if (user.save()) {
    return user
}
else {
    user.errors.allErrors.each {
        println it
    }
}
{code}
