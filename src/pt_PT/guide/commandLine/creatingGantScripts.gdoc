Pode criar os seus próprios scripts Gant executando o comando [create-script|commandLine] a partir da raiz do seu projeto. Por exemplo o comando seguinte:

{code}
grails create-script compile-sources
{code}

Irá criar um script chamado @scripts/CompileSources.groovy@. Os scripts Gant, em si, são semelhantes a scripts Groovy regulares excepto no fato de suportarem o conceito de "alvos" e dependências entre si:

{code:title=scripts/CompileSources.groovy}
target(default:"The default target is the one that gets executed by Grails") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}
{code}

Como se demonstra no script acima, existe uma variável @ant@ implícita (uma instância de @groovy.util.AntBuilder@) que permite o acesso a [Apache Ant API|http://ant.apache.org/manual/index.html].
{note}
Em versões anteriores de Grails (1.0.3 e abaixo), a variável era @Ant@, ex. com uma primeira letra maiúscula.
{note}

Também pode "depender" de outros alvos utilizando o método @depends@ demonstrado acima no alvo @default@.

h3. O alvo por defeito

No exemplo acima, especificámos um alvo com o nome explícito "default". Esta é uma forma de definir o alvo por defeito para um script. Uma abordagem alternativa é utilizar o método @setDefaultTarget()@:

{code:title=scripts/CompileSources.groovy}
target("clean-compile": "Performs a clean compilation on the app source") {
    depends(clean, compile)
}

target(clean:"Clean out things") {
    ant.delete(dir:"output")
}

target(compile:"Compile some sources") {
    ant.mkdir(dir:"mkdir")
    ant.javac(srcdir:"src/java", destdir:"output")
}

setDefaultTarget("clean-compile")
{code}

Isto permite-lhe invocar diretamente o alvo por defeito a partir de outros scripts se assim o desejar. De notar que, embora neste exemplo tenhamos colocado a chamada a @setDefaultTarget()@ no final do script, ela pode ser colocada em qualquer sítio desde que seja colocada _depois_ do alvo a que se refere ("clean-compile" neste caso).

Que abordagem é melhor? Honestamente, pode utilizar a que preferir - não parecem existir nenhumas desvantagens de maior em nenhum dos casos. Algo que gostaria de referir é que se deseja permitir que outros scripts invoquem o seu alvo "default", deve movê-lo para um script partilhado que não tenha nenhum alvo pré-definido. Falaremos mais sobre este assunto na próxima secção.
