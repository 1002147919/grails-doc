Grails é definitivamente um framework com opinião e prefere a convenção à configuração, mas isso não quer dizer que _não o possa_ configurar. Nesta secção vamos ver como pode influenciar e modificar a construção standard de Grails.

h3. Por defeito

O núcleo da configuração de construção Grails é a classe @grails.util.BuildSettings@, que contém bastante informação útil. Controla o local para onde as classes são compiladas, que dependências a aplicação tem , e outros parâmetros semelhantes.

Aqui fica uma seleção das opções de configuração e os seus valores por defeito:
{table}
*Propriedade* | *Opção de configuração* | *Valor por defeito*
grailsWorkDir | grails.work.dir | $USER_HOME/.grails/<grailsVersion>
projectWorkDir | grails.project.work.dir | <grailsWorkDir>/projects/<baseDirName>
classesDir | grails.project.class.dir | <projectWorkDir>/classes
testClassesDir | grails.project.test.class.dir | <projectWorkDir>/test-classes
testReportsDir | grails.project.test.reports.dir | <projectWorkDir>/test/reports
resourcesDir | grails.project.resource.dir | <projectWorkDir>/resources
projectPluginsDir | grails.project.plugins.dir | <projectWorkDir>/plugins
globalPluginsDir | grails.global.plugins.dir | <grailsWorkDir>/global-plugins
verboseCompile | grails.project.compile.verbose | @false@
{table}

A classe @BuildSettings@ tem também algumas outras propriedades, mas estas devem ser tratadas apenas como de leitura:
{table}
*Propriedade* | *Descrição*
baseDir | Localização do projeto.
userHome | Diretoria base do utilizador.
grailsHome | Localização da instalação de Grails em uso (pode ser @null@).
grailsVersion | A versão de Grails utilizada pelo projeto.
grailsEnv | O ambiente Grails atual.
compileDependencies | Uma lista de dependências em tempo de compilação do projeto como instâncias @File@.
testDependencies | Uma lista de dependências em tempo de teste do projeto como instâncias @File@.
runtimeDependencies | Uma lista de dependências em tempo de execução do projeto como instâncias @File@.
{table}

Claro que estas propriedades não servem de muito se não as conseguir perceber. Felizmente isso é fácil de fazer: uma instÂncia de @BuildSettings@ está disponível para os seus scripts como a variável de script @grailsSettings@. Também pode aceder a ela, a partir do seu código, utilizando a classe @grails.util.BuildSettingsHolder@, mas isso não é recomendado.

h3. Alterando as predefinições

Todas as propriedades na primeira tabela podem ser alteradas por uma propriedade de sistema ou opção de configuração - use simplesmente o nome da "opção de configuração". Por exemplo, para alterar a diretoria de trabalho do projeto, pode executar este comando:
{code}
grails -Dgrails.project.work.dir=work compile
{code}
ou adicionar esta opção ao seu ficheiro @grails-app/conf/BuildConfig.groovy@ file:
{code}
grails.project.work.dir = "work"
{code}
Note que os valores pré-definidos têm em conta o valor das propriedades de que dependem, por isso alterar a diretoria de trabalho do projeto desta forma irá também mudar de local as classes compiladas, classes de teste, recursos e plugins.

O que acontece quando utiliza tanto uma propriedade de sistema como uma opção de configuração? Neste caso ganha a propriedade de sistema porque tem precedência sobre o ficheiro @BuildConfig.groovy@, que por sua vez tem precedência sobre os valores pré-definidos.

O ficheiro @BuildConfig.groovy@ é irmão de @grails-app/conf/Config.groovy@ - o primeiro contém opções que só afetam a construção, enquanto que o último contém opções que afetam a aplicação em tempo de execução. Também não está limitado às opções na primeira tabela: irá encontrar opções de configuração de construção assinaladas ao longo da documentação, tais como as que especificam o porto em que corre o contentor de servlet integrado ou para determinar que ficheiros são empacotados no ficheiro WAR.

h3. Opções de configuração de construção

{table}
 Nome | Descrição
 grails.server.port.http | Porto onde corre o contentor de servlet embebido em ("run-app" e "run-war"). Integer.
 grails.server.port.https | Port to run the embedded servlet container on for HTTPS ("run-app \-\-https" and "run-war \-\-https"). Integer.
 grails.config.base.webXml | Path to a custom web.xml file to use for the application (alternative to using the web.xml template).
 grails.compiler.dependencies | Legacy approach to adding extra dependencies to the compiler classpath. Set it to a closure containing "fileset()" entries. These entries will be processed by an @AntBuilder@ so the syntax is the Groovy form of the corresponding XML elements in an Ant build file, e.g. @fileset(dir: "$basedir/lib", include: "\*\*/\*.class)@.
 grails.testing.patterns | A list of Ant path patterns that let you control which files are included in the tests. The patterns should not include the test case suffix, which is set by the next property.
 grails.testing.nameSuffix | By default, tests are assumed to have a suffix of "Tests". You can change it to anything you like but setting this option. For example, another common suffix is "Test".
 grails.project.war.file | A string containing the file path of the generated WAR file, along with its full name (include extension). For example, "target/my-app.war".
 grails.war.dependencies | A closure containing "fileset()" entries that allows you complete control over what goes in the WAR's "WEB-INF/lib" directory.
 grails.war.copyToWebApp | A closure containing "fileset()" entries that allows you complete control over what goes in the root of the WAR. It overrides the default behaviour of including everything under "web-app".
 grails.war.resources | A closure that takes the location of the staging directory as its first argument. You can use any Ant tasks to do anything you like. It is typically used to remove files from the staging directory before that directory is jar'd up into a WAR.
 grails.project.web.xml | The location to generate Grails' web.xml to
{table}
