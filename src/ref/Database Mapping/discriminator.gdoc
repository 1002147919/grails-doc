h1. discriminator

h2. Purpose

Customizes the discriminator value used in table-per-subclass inheritance mapping.

h2. Examples

{code:java}
class Content {
	...
}
class PodCast extends Content{
	...
	static mapping = {
		discriminator "audio"
	}
}
{code}

h2. Description

Usage: @discriminator(string/map)@

Arguments:

* @column@ (optional) - The column name to store the discriminator
* @value@ - The value to use for the discriminator
* @formula@ (optional) - an SQL expression that is executed to evaluate the type of class. Use this or column but not both
* @type@ (optional defaults to string) - the Hibernate type, used for the where clause condition to know if it needs to wrap it with ' or not


By default when mapping inheritance Grails uses a single-table model so that all subclasses share the same table. A discriminator column is then used to help Grails tell what type a particular row is. By default the class name is stored as the value of this column. You can use the @discriminator@ method to customize the value stored:

{code:java}
class Content {
	...
}
class PodCast extends Content{
	...
	static mapping = {
		discriminator "audio"
	}
}
{code}

You can also customize the discriminator column name:

{code:java}
class Content {
	...
	static mapping = {
		discriminator column:"content_type"
	}
}
class PodCast extends Content{
	...
	static mapping = {
		discriminator value: "audio"
	}
}
{code}

Or you can use a formula:

{code:java}
class Content {
	...
	static mapping = {
		discriminator value: "1", formula="case when CLASS_TYPE in ('a', 'b', 'c') then 0 else 1 end", type="integer"
	}
}
class PodCast extends Content{
	...
	static mapping = {
		discriminator value: "0"
	}
}
{code}