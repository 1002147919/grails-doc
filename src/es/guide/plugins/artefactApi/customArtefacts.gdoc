{hidden}
Plugins can easily provide their own artefacts so that they can easily find out what implementations are available and take part in reloading. All you need to do is create an @ArtefactHandler@ implementation and register it in your main plugin class:
{hidden}

Los plugins pueden proporcionar de manera sencilla sus propios artefactos, por lo que pueden encontrar que implementaciones estan disponibles y tomar parte en las recargas. Todo lo que hace falta es crear una implementación @ArtefactHandler@ y registrala en la clase principal del plugin:

{code}
class MyGrailsPlugin {
    def artefacts = [ org.somewhere.MyArtefactHandler ]
    ...
}
{code}

{hidden}
The @artefacts@ list can contain either handler classes (as above) or instances of handlers.

So, what does an artefact handler look like? Well, put simply it is an implementation of the [ArtefactHandler|api:org.codehaus.groovy.grails.commons.ArtefactHandler] interface. To make life a bit easier, there is a skeleton implementation that can readily be extended: [ArtefactHandlerAdapter|api:org.codehaus.groovy.grails.commons.ArtefactHandlerAdapter].
{hidden}

La lista @artefacts@ puede contener tanto clases como instancias de handlers. 

Por lo tanto, ¿que pinta tiene un handler? Explicado de manera sencilla son implementaciones de la interfaz [ArtefactHandler|api:org.codehaus.groovy.grails.commons.ArtefactHandler]. Para hacerlo más sencillo, existe una implementación esqueleto preparada para ser extendida: [ArtefactHandlerAdapter|api:org.codehaus.groovy.grails.commons.ArtefactHandlerAdapter]. 


{hidden}
In addition to the handler itself, every new artefact needs a corresponding wrapper class that implements [GrailsClass|api:org.codehaus.groovy.grails.commons.GrailsClass]. Again, skeleton implementations are available such as [AbstractInjectableGrailsClass|api:org.codehaus.groovy.grails.commons.AbstractInjectableGrailsClass], which is particularly useful as it turns your artefact into a Spring bean that is auto-wired, just like controllers and services.

The best way to understand how both the handler and wrapper classes work is to look at the Quartz plugin:
{hidden}

Además del propio handler, todos los nuevos artefactos necesitan su correspondiente clase wrapper (envolvente) que implemente [GrailsClass|api:org.codehaus.groovy.grails.commons.GrailsClass]. Como en el caso anterior, existen implementaciones esqueleto como [AbstractInjectableGrailsClass|api:org.codehaus.groovy.grails.commons.AbstractInjectableGrailsClass], que es particulamente util puesto que convierte el artefacto en un bean de Spring que es auto-enlazado, como un controlador o servicio más.

La mejor manera de entender como los handlers y wrappers funcionan es echar un vistazo al plugin Quartz:


* [GrailsJobClass|http://github.com/nebolsin/grails-quartz/blob/master/src/java/grails/plugins/quartz/GrailsJobClass.java]
* [DefaultGrailsJobClass|http://github.com/nebolsin/grails-quartz/blob/master/src/java/grails/plugins/quartz/DefaultGrailsJobClass.java]
* [JobArtefactHandler|http://github.com/nebolsin/grails-quartz/blob/master/src/java/grails/plugins/quartz/JobArtefactHandler.java]

{hidden}
Another example is the [Shiro plugin|http://github.com/pledbrook/grails-shiro] which adds a realm artefact.
{hidden}

Otro ejemplo interesante es [Shiro plugin|http://github.com/pledbrook/grails-shiro], que además añade un espacio de artefactos.


