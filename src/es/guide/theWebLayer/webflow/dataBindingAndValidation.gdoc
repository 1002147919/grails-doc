{hidden}
In the section on [start and end states|guide:startAndEndStates], the start state in the first example triggered a transition to the @enterPersonalDetails@ state. This state renders a view and waits for the user to enter the required information:
{hidden}
En la seccion de [start and end states|guide:startAndEndStates], el estado de inicio en el primer ejemplo dispara un transicion hacia el estado @enterPersonalDetails@. Este estado renderea la vista y espera a que el usuario introduzca la informacion requerida:

{code:java}
enterPersonalDetails {
   on("submit").to "enterShipping"
   on("return").to "showCart"
}
{code}

{hidden}
The view contains a form with two submit buttons that either trigger the submit event or the return event:
{hidden}
La vista contiene una forma con dos botones de enviar que cualquiera de los dos dispara el evento de enviar o el evento de retorno:


{code:xml}
<g:form action="shoppingCart">
    <!-- Other fields -->
    <g:submitButton name="submit" value="Continue"></g:submitButton>
    <g:submitButton name="return" value="Back"></g:submitButton>
</g:form>
{code}

{hidden}
However, what about the capturing the information submitted by the form? To to capture the form info we can use a flow transition action:
{hidden}
Sin embargo, Â¿que hay de capturar la informacion enviada por la forma? Para obtener la informacion de la forma podemos usar una accion de flujo de transaccion:

{code:java}
enterPersonalDetails {
   on("submit") {
      flow.person = new Person(params)
      !flow.person.validate() ? error() : success()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}

{hidden}
Notice how we perform data binding from request parameters and place the @Person@ instance within @flow@ scope. Also interesting is that we perform [validation|guide:validation] and invoke the @error()@ method if validation fails. This signals to the flow that the transition should halt and return to the @enterPersonalDetails@ view so valid entries can be entered by the user, otherwise the transition should continue and go to the @enterShipping@ state.
{hidden}
Note como se desarrolla el data binding desde los parametros de la peticion y coloca la instancia @Person@ dentro del alcance @flow@. Tambien es interesante que desarrollamos [validation|guide:validation] e invocamos el metodo @error()@ si la validacion falla. Esto avisa al flujo que la transicion debe ser detenida y regresar a la vista @enterPersonalDetails@ y asi entradas validas pueden ser introducidas por el usuario, de otra manera la transicion debe continuar e ir al estado @enterShipping@.

{hidden}
Like regular actions, flow actions also support the notion of [Command Objects|guide:commandObjects] by defining the first argument of the closure:
{hidden}
Como las acciones regulares, las acciones de flujo soportan la nocion de [Command Objects|guide:commandObjects] definiendo el primer agurmento del closure:

{code:java}
enterPersonalDetails {
   on("submit") { PersonDetailsCommand cmd ->
       flow.personDetails = cmd
      !flow.personDetails.validate() ? error() : success()
   }.to "enterShipping"
   on("return").to "showCart"
}
{code}
