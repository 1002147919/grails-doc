{hidden}
Grails also lets you map HTTP response codes to controllers, actions or views. Just use a method name that matches the response code you are interested in:
{hidden}
Grails tambien le permite mapear codigos de respuesta HTTP hacia los controllers, actions o vistas. Solo use un nombre de metodo que empate el codigo de respuesta en el cual esta interesado:

{code:java}
static mappings = {
   "403"(controller: "errors", action: "forbidden")
   "404"(controller: "errors", action: "notFound")
   "500"(controller: "errors", action: "serverError")
}
{code}

{hidden}
Or you can specify custom error pages:
{hidden}
O puede especificar paginas de error personalizadas:

{code:java}
static mappings = {
   "403"(view: "/errors/forbidden")
   "404"(view: "/errors/notFound")
   "500"(view: "/errors/serverError")
}
{code}

{hidden}
h4. Declarative Error Handling
{hidden}
h4. Manejo Declarativo de Errores

{hidden}
In addition you can configure handlers for individual exceptions:
{hidden}
Ademas puede configurar los manejadores para excepciones individuales:

{code:java}
static mappings = {
   "403"(view: "/errors/forbidden")
   "404"(view: "/errors/notFound")
   "500"(controller: "errors", action: "illegalArgument",
         exception: IllegalArgumentException)
   "500"(controller: "errors", action: "nullPointer",
         exception: NullPointerException)
   "500"(controller: "errors", action: "customException",
         exception: MyException)
   "500"(view: "/errors/serverError")
}
{code}

{hidden}
With this configuration, an @IllegalArgumentException@ will be handled by the @illegalArgument@ action in @ErrorsController@, a @NullPointerException@ will be handled by the @nullPointer@ action, and a @MyException@ will be handled by the @customException@ action. Other exceptions will be handled by the catch-all rule and use the @/errors/serverError@ view.
{hidden}
Con esta configuracion,

{hidden}
You can access the exception from your custom error handing view or controller action using the request's @exception@ attribute like so:
{hidden}
Puede acceder a la excepcion desde

{code:java}
class ErrorController {
    def handleError() {
        def exception = request.exception
        // perform desired processing to handle the exception
    }
}
{code}


{warning}
{hidden}
If your error-handling controller action throws an exception as well, you'll end up with a @StackOverflowException@.
{hidden}
Si su accion del manejador de errores del controller arroja una excepcion tambien, terminara con una @StackOverflowException@.
{warning}
