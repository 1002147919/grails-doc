{hidden}
Grails' URL mappings mechanism also supports wildcard mappings. For example consider the following mapping:
{hidden}
El mecanismo de mapeo de URL de Grails tambien soporta el mapeo de wildcards. Por ejemplo considere el siguiente mapeo:

{code:java}
static mappings = {
    "/images/*.jpg"(controller: "image")
}
{code}

{hidden}
This mapping will match all paths to images such as @/image/logo.jpg@. Of course you can achieve the same effect with a variable:
{hidden}
Este mapeo empatara todas las rutas de imagenes tales como @/image/logo.jpg@. Por supuesto puede obtener el mismo efecto con la variable:

{code:java}
static mappings = {
    "/images/$name.jpg"(controller: "image")
}
{code}

{hidden}
However, you can also use double wildcards to match more than one level below:
{hidden}
Sin embargo, puede tambien usar dobles wildcards para empatar mas de un solo nivel abajo:

{code:java}
static mappings = {
    "/images/**.jpg"(controller: "image")
}
{code}

{hidden}
In this cases the mapping will match @/image/logo.jpg@ as well as @/image/other/logo.jpg@. Even better you can use a double wildcard variable:
{hidden}
En este caso el mapeo empatara @/image/logo.jpg@ asi como @/image/other/logo.jpg@. Aun mejor puede usar la variable de doble wildcard:

{code:java}
static mappings = {
    // will match /image/logo.jpg and /image/other/logo.jpg
    "/images/$name**.jpg"(controller: "image")
}
{code}

{hidden}
In this case it will store the path matched by the wildcard inside a @name@ parameter obtainable from the [params|controllers] object:
{hidden}
En este caso sera almacenada la ruta que empate con el wildcard dentro del parametro @name@ obtenible desde el objeto [params|controllers]:

{code:java}
def name = params.name
println name // prints "logo" or "other/logo"
{code}

{hidden}
If you use wildcard URL mappings then you may want to exclude certain URIs from Grails' URL mapping process. To do this you can provide an @excludes@ setting inside the @UrlMappings.groovy@ class:
{hidden}
Si usa el wildcard del mapeo de URL entonces querra excluir ciertas URIs del proceso de mapeo de URL de Grails. Para hacer esto puede proveer una setting @excludes@ dentro de la clase @UrlMappings.groovy@:

{code:java}
class UrlMappings {
    static excludes = ["/images/*", "/css/*"]
    static mappings = {
        ...
    }
}
{code}

{hidden}
In this case Grails won't attempt to match any URIs that start with @/images@ or @/css@.
{hidden}
En este caso Grails no intentara de empatar ninguna URI que comience con @/images@ o @/css@.
